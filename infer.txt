We use three different models:
    Static:
        - We need to make sure the predictions are always bounded so that we only skip one report
        - 

    Dynamic:
        - Used to having a report in the middle of the range, 1 month cushion then range up to 4 months
        - 
    Indicators:
        - We predict the price in 1 month
        - This our short term part 
        - 
Together:
    Our dynamic serves as a long term predictor, static is medium and indicator short term
    We figure out how to plug them together and train them together 



The price is predicted as the 80th percentile of the price of some interval around the predicting date


Things to try tommorow:
    Run it dry without normalization through a random LSTM 
    Divide the quantile price by the current price or the current quantile and run through LSTM
    Make the values multiples instead of numbers 
    Do balancing normalization and then run through LSTM


If we train on the price multiples, we can just give in market cap instead of shares because the model can no longer cheat 

Stateless / Statefull
    - of course its stateless, that would give it more info than it needs and it could cheat

We use market cap as the size and use the multiplier of price as the label
    -After we can divide the values by shares and then normalize 

Would the LSTM pick up on changes in general and not focus on the size of the things?

Review the training, the resets could be wrong or not happening.






Things to do:
    Add the price changes as a feature 
    Get all the 1000 companies 
    Figure out what static things to drop to get more data 
    Add the ghost calculations to ready_data
        Extend the calculation backwards according to lookbehind to have the multiples available
